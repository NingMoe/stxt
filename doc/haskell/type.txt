Types and Typeclasses
=====================

Type
----

之前我們有說過 Haskell 是 Static Type，這表示在編譯時期每個表達式的型
別都已經確定下來，這提高了程式碼的安全性。若程式碼中有讓布林值與數字相
除的動作，就不會通過編譯。這樣的好處就是與其讓程序在運行時崩潰，不如在
編譯時就找出可能的錯誤。Haskell 中所有東西都有型別，因此在編譯的時候編
譯器可以做到很多事情。

與 Java 和 Pascal 不同，Haskell 支持型別推導。寫下一個數字，你就沒必要
另告訴 Haskell 說"它是個數字"，它自己能推導出來。這樣我們就不必在每個
函數或表達式上都標明其型別了。在前面我們只簡單涉及一下 Haskell 的型別
方面的知識，但是理解這一型別系統對於 Haskell 的學習是至關重要的。

型別是每個表達式都有的某種標籤，它標明了這一表達式所屬的範疇。例如，表
達式 True 是 boolean 型，"hello"是個字串，等等。

可以使用 ghci 來檢測表達式的型別。使用 :t 命令後跟任何可用的表達式，即
可得到該表達式的型別，先試一下：

ghci> :t 'a'   
'a' :: Char   
ghci> :t True   
True :: Bool   
ghci> :t "HELLO!"   
"HELLO!" :: [Char]   
ghci> :t (True, 'a')   
(True, 'a') :: (Bool, Char)   
ghci> :t 4 == 5   
4 == 5 :: Bool

可以看出，:t 命令處理一個表達式的輸出結果為表達式後跟 :: 及其型別，::
 讀作"它的型別為"。凡是明確的型別，其首字母必為大寫。'a', 如它的樣子，
是 Char 型別，易知是個字元 (character)。True 是 Bool 型別，也靠譜。不
過這又是啥，檢測 "hello" 得一個 [Char] 這方括號表示一個 List，所以我們
可以將其讀作"一組字元的 List"。而與 List 不同，每個 Tuple 都是獨立的型
別，於是 (True,"a") 的型別是 (Bool,Char)，而 ('a','b','c') 的型別為
 (Char,Char,Char)。4==5 一定回傳 False，所以它的型別為 Bool。

同樣，函數也有型別。編寫函數時，給它一個明確的型別聲明是個好習慣，比較
短的函數就不用多此一舉了。還記得前面那個過濾大寫字母的 List
 Comprehension 嗎？給它加上型別聲明便是這個樣子：

removeNonUppercase :: [Char] -> [Char]   
removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]

removeNonUppercase 的型別為 [Char]->[Char]，從它的參數和回傳值的型別上
可以看出，它將一個字串映射為另一個字串。[Char] 與 String 是等價的，但
使用 String 會更清晰：removeNonUppercase :: String -> String。編譯器會
自動檢測出它的型別，我們還是標明了它的型別聲明。要是多個參數的函數該怎
樣？如下便是一個將三個整數相加的簡單函數。

addThree :: Int -> Int -> Int -> Int   
addThree x y z = x + y + z

參數之間由 -> 分隔，而與回傳值之間並無特殊差異。回傳值是最後一項，參數
就是前三項。稍後，我們將講解為何只用 -> 而不是 Int,Int,Int->Int 之類"
更好看"的方式來分隔參數。

如果你打算給你編寫的函數加上個型別聲明卻拿不準它的型別是啥，只要先不寫
型別聲明，把函數體寫出來，再使用 :t 命令測一下即可。函數也是表達式，所
以 :t 對函數也是同樣可用的。

如下是幾個常見的型別：

Int 表示整數。7 可以是 Int，但 7.2 不可以。Int 是有界的，也就是說它由
上限和下限。對 32 位的機器而言，上限一般是 214748364，下限是
 -214748364。

Integer 表示...厄...也是整數，但它是無界的。這就意味着可以用它存放非常
非常大的數，我是說非常大。它的效率不如 Int 高。

factorial :: Integer -> Integer   
factorial n = product [1..n]
ghci> factorial 50   
30414093201713378043612608166064768844377641568960512000000000000
Float 表示單精度的浮點數。

circumference :: Float -> Float   
circumference r = 2 * pi * r
ghci> circumference 4.0   
25.132742
Double 表示雙精度的浮點數。

circumference' :: Double -> Double   
circumference' r = 2 * pi * r
ghci> circumference' 4.0   
25.132741228718345
Bool 表示布林值，它只有兩種值：True 和 False。

Char 表示一個字元。一個字元由單引號括起，一組字元的 List 即為字串。

Tuple 的型別取決於它的長度及其中項的型別。注意，空 Tuple 同樣也是個型別，它只有一種值：()。

Type variables
--------------

你覺得 head 函數的型別是啥？它可以取任意型別的 List 的首項，是怎麼做到
的呢？我們查一下！

ghci> :t head   
head :: [a] -> a

嗯! a 是啥？型別嗎？想想我們在前面說過，凡是型別其首字母必大寫，所以它
不會是個型別。它是個型別變數，意味着 a 可以是任意的型別。這一點與其他
語言中的泛型 (generic) 很相似，但在 Haskell 中要更為強大。它可以讓我們
輕而易舉地寫出型別無關的函數。使用到型別變數的函數被稱作"多態函數
 "，head 函數的型別聲明裡標明了它可以取任意型別的 List 並回傳其中的第
一個元素。

在命名上，型別變數使用多個字元是合法的，不過約定俗成，通常都是使用單個
字元，如 a, b ,c ,d...

還記得 fst？我們查一下它的型別：

ghci> :t fst   
fst :: (a, b) -> a

可以看到fst取一個包含兩個型別的 Tuple 作參數，並以第一個項的型別作為回
傳值。這便是 fst 可以處理一個含有兩種型別項的 pair 的原因。注意，a 和
 b 是不同的型別變數，但它們不一定非得是不同的型別，它只是標明了首項的
型別與回傳值的型別相同。

Typeclasses入門
---------------

型別定義行為的介面，如果一個型別屬於某 Typeclass，那它必實現了該
 Typeclass 所描述的行為。很多從 OOP 走過來的人們往往會把 Typeclass 當
成物件導向語言中的 class 而感到疑惑，厄，它們不是一回事。易於理解起見
，你可以把它看做是 Java 的 interface。

== 函數的型別聲明是怎樣的？

ghci> :t (==)   
(==) :: (Eq a) => a -> a -> Bool

Note: 判斷相等的==運算子是函數，+-*/之類的運算子也是同樣。在預設條件下
，它們多為中綴函數。若要檢查它的型別，就必須得用括號括起使之作為另一個
函數，或者說以首碼函數的形式呼叫它。

有意思。在這裡我們見到個新東西：=> 符號。它左邊的部分叫做型別約束。我
們可以這樣閲讀這段型別聲明："相等函數取兩個相同型別的值作為參數並回傳
一個布林值，而這兩個參數的型別同在 Eq 類之中(即型別約束)"

Eq 這一 Typeclass 提供了判斷相等性的介面，凡是可比較相等性的型別必屬於
 Eq class。

ghci> 5 == 5    
True    
ghci> 5 /= 5    
False    
ghci> 'a' == 'a'    
True    
ghci> "Ho Ho" == "Ho Ho"    
True    
ghci> 3.432 == 3.432    
True

elem 函數的型別為: (Eq a)=>a->[a]->Bool。這是它在檢測值是否存在於一個
 List 時使用到了==的緣故。

幾個基本的 Typeclass：

Eq 包含可判斷相等性的型別。提供實現的函數是 == 和 /=。所以，只要一個函
數有Eq類的型別限制，那麼它就必定在定義中用到了 == 和 /=。剛纔說了，除
函數以外的所有型別都屬於 Eq，所以它們都可以判斷相等性。

Ord 包含可比較大小的型別。除了函數以外，我們目前所談到的所有型別都屬於
 Ord 類。Ord 包中包含了<, >, <=, >= 之類用於比較大小的函數。compare 函
數取兩個 Ord 類中的相同型別的值作參數，回傳比較的結果。這個結果是如下
三種型別之一：GT, LT, EQ。

ghci> :t (>)   
(>) :: (Ord a) => a -> a -> Bool
型別若要成為Ord的成員，必先加入Eq家族。

ghci> "Abrakadabra" < "Zebra"   
True   
ghci> "Abrakadabra" `compare` "Zebra"   
LT   
ghci> 5 >= 2   
True   
ghci> 5 `compare` 3   
GT
Show 的成員為可用字串表示的型別。目前為止，除函數以外的所有型別都是
 Show 的成員。操作 Show Typeclass，最常用的函數表示 show。它可以取任一
Show的成員型別並將其轉為字串。

ghci> show 3   
"3"   
ghci> show 5.334   
"5.334"   
ghci> show True   
"True"
Read 是與 Show 相反的 Typeclass。read 函數可以將一個字串轉為 Read 的某成員型別。

ghci> read "True" || False   
True   
ghci> read "8.2" + 3.8   
12.0   
ghci> read "5" - 2   
3   
ghci> read "[1,2,3,4]" ++ [3]   
[1,2,3,4,3]
一切良好，如上的所有型別都屬於這一 Typeclass。嘗試 read "4" 又會怎樣？

ghci> read "4"   
< interactive >:1:0:   
    Ambiguous type variable `a' in the constraint:   
      `Read a' arising from a use of `read' at <interactive>:1:0-7   
    Probable fix: add a type signature that fixes these type variable(s)
ghci 跟我們說它搞不清楚我們想要的是什麼樣的回傳值。注意呼叫 read 後跟的那部分，ghci 通過它來辨認其型別。若要一個 boolean 值，他就知道必須得回傳一個 Bool 型別的值。但在這裡它只知道我們要的型別屬於 Read Typeclass，而不能明確到底是哪個。看一下 read 函數的型別聲明吧：

ghci> :t read   
read :: (Read a) => String -> a
看，它的回傳值屬於 ReadTypeclass，但我們若用不到這個值，它就永遠都不會得知該表達式的型別。所以我們需要在一個表達式後跟:: 的型別註釋，以明確其型別。如下：

ghci> read "5" :: Int   
5   
ghci> read "5" :: Float   
5.0   
ghci> (read "5" :: Float) * 4   
20.0   
ghci> read "[1,2,3,4]" :: [Int]   
[1,2,3,4]   
ghci> read "(3, 'a')" :: (Int, Char)   
(3, 'a')
編譯器可以辨認出大部分表達式的型別，但遇到 read "5" 的時候它就搞不清楚
究竟該是 Int 還是 Float 了。只有經過運算，Haskell 才會明確其型別；同時
由於 Haskell 是靜態的，它還必須得在 編譯前搞清楚所有值的型別。所以我們
就最好提前給它打聲招呼："嘿，這個表達式應該是這個型別，省的你認不出來
！"

Enum 的成員都是連續的型別 -- 也就是可枚舉。Enum 類存在的主要好處就在於
我們可以在 Range 中用到它的成員型別：每個值都有後繼子 (successer) 和前
置子 (predecesor)，分別可以通過 succ 函數和 pred 函數得到。該
 Typeclass 包含的型別有：(), Bool, Char, Ordering, Int, Integer, Float
 和 Double。

ghci> ['a'..'e']   
"abcde"   
ghci> [LT .. GT]   
[LT,EQ,GT]   
ghci> [3 .. 5]   
[3,4,5]   
ghci> succ 'B'   
'C'
Bounded 的成員都有一個上限和下限。

ghci> minBound :: Int   
-2147483648   
ghci> maxBound :: Char   
'\1114111'   
ghci> maxBound :: Bool   
True   
ghci> minBound :: Bool   
False
minBound 和 maxBound 函數很有趣，它們的型別都是 (Bounded a) => a。可以說，它們都是多態常量。

如果其中的項都屬於 Bounded Typeclass，那麼該 Tuple 也屬於 Bounded

ghci> maxBound :: (Bool, Int, Char)   
(True,2147483647,'\1114111')
Num 是表示數字的 Typeclass，它的成員型別都具有數字的特徵。檢查一個數字的型別：

ghci> :t 20   
20 :: (Num t) => t
看樣子所有的數字都是多態常量，它可以作為所有 Num Typeclass中的成員型別。以上便是 Num Typeclass 中包含的所有型別，檢測 * 運算子的型別，可以發現它可以處理一切的數字：

ghci> :t (*)   
(*) :: (Num a) => a -> a -> a
它只取兩個相同型別的參數。所以 (5 :: Int) * (6 :: Integer) 會引發一個型別錯誤，而 5 * (6 :: Integer) 就不會有問題。

型別只有親近 Show 和 Eq，才可以加入 Num。

Integral 同樣是表示數字的 Typeclass。Num 包含所有的數字：實數和整數。而 Intgral 僅包含整數，其中的成員型別有 Int 和 Integer。

Floating 僅包含浮點型別：Float 和 Double。

有個函數在處理數字時會非常有用，它便是 fromIntegral。其型別聲明為： fromIntegral :: (Num b, Integral a) => a -> b。從中可以看出，它取一個整數做參數並回傳一個更加通用的數字，這在同時處理整數和浮點時會尤為有用。舉例來說，length 函數的型別聲明為：length :: [a] -> Int，而非更通用的形式，如 (Num b) => length :: [a] -> b。這應該是歷史原因吧，反正我覺得挺蠢。如果取了一個 List 長度的值再給它加 3.2 就會報錯，因為這是將浮點數和整數相加。面對這種情況，我們就用 fromIntegral (length [1,2,3,4]) + 3.2 來解決。

注意到，fromIntegral 的型別聲明中用到了多個型別約束。如你所見，只要將多個型別約束放到括號裡用逗號隔開即可。

類型類
======

類型類（type class）用於定義通用接口，
為不同類型提供一組公共特性集。

類型類定義了一組函數，這些函數對於不同類型的值使用不同的函數實現。
它和其他語言的接口和多態方法有些類似。

類型類是某些基本語言特性的核心，比如相等性測試和數值操作符。

類型類的作用
------------

假設想對Color類型的值進行對比，
但Haskell的語言設計者卻沒有實現==操作。

要解決這個問題，必須親自實現一個相等性測試函數：

-- file: ch06/colorEq.hs

data  Color  =  Red  |  Green  |  Blue

colorEq  ::  Color  ->  Color  ->  Bool 
colorEq  Red    Red    =  True
colorEq  Green  Green  =  True 
colorEq  Blue   Blue   =  True colorEq
  _      _      =  False

在 ghci 裡測試：

Prelude >  : load  colorEq.hs
[1 of 1]  Compiling  Main (colorEq.hs,  interpreted) 
Ok, modules loaded:  Main.

*Main> colorEq Green Green 
True

*Main> colorEq Blue Red 
False

程序又添加了一個新類型——職位：
它對公司中的各個員工進行分類。

在執行像是工資計算這類任務是，又需要用到相等性測試，
所以又需要再次為職位類型定義相等性測試函數：

-- file: ch06/roleEq.hs

data  Role  =  Boss  |  Manager  |  Employee

roleEq  ::  Role  ->  Role  ->  Bool
roleEq  Employee Employee = True
roleEq  Manager  Manager  =  True
roleEq  Boss     Boss     =  True
roleEq  _        _        =  False 測試：

Prelude >:load  roleEq.hs 
[1 of 1]  Compiling  Main (  roleEq . hs ,  interpreted  )
Ok ,  modules  loaded : Main .

*Main>  roleEq  Boss  Boss 
True

*Main>  roleEq  Boss  Employee 
False

colorEq和roleEq的定義揭示了一個問題：
對於每個不同的類型，都需要為定義一個對比函數。

這種做法非常煩人。
如果同一個對比函數（比如==）可以用於對比任何類型的值，
這樣就會方便得多。

另一方面，一般來說，如果定義了相等測試函數（比如==），
那麼不等測試函數（比如/=）的值就可以直接對相等測試函數取反（使用not）來計算得出。
因此，如果可以通過相等測試函數來定義不等測試函數，那麼會更方便。

通用函數還可以讓代碼變得更通用：
如果同一段代碼可以用於不同類型的輸入值，
那麼程序的代碼量將大大減少。

重點是，如果在之後添加通用函數對新類型的支持，
那麼原來的代碼應該不需要進行修改。

Haskell 的類型類可以滿足以上提到的所有要求。

什麼是類型類？
--------------

類型類定義了一集函數，這些函數對於不同類型的值使用不同的函數實現。它和
其他語言的接口和多態方法有些類似。

[譯註：這裡原文是將“面向對象編程中的對象”和Haskell 的類型類進行類比，
但實際上這種類比並不太恰當，類比成接口和多態方法更適合一點。]

我們定義一個類型類來解決前面提到的相等性測試問題：

class BasicEq a where 
isEqual  ::  a  ->  a  ->  Bool

類型類使用 class 關鍵字來定義，
跟在class之後的BasicEq是這個類型類的名字，
之後的a是這個類型類的實例類型（instance type）。

BasicEq使用類型變量a 來表示實例類型，
說明它並不將這個類型類限定於某個類型：
任何一個類型，只要它實現了這個類型類中定義的函數，
那麼它就是這個類型類的實例類型。

實例類型所使用的名字可以隨意選擇，但是它和類型類中定義函數簽名時所使用
的名字應該保持一致。
比如說，我們使用a來表示實例類型，
那麼函數簽名中也必須使用a來代表這個實例類型。

BasicEq類型類只定義了isEqual一個函數——
它接受兩個參數作為輸入，
並且這兩個參數都指向同一種實例類型：

Prelude >:load  BasicEq_1.hs
[1 of 1] Compiling  Main (  BasicEq_1 . hs ,  interpreted  ) Ok ,
modules loaded :  Main .

* Main >:type isEqual 
isEqual :: BasicEq a => a -> a -> Bool 

以下代碼將 Bool類型作為BasicEq的實例類型，實現了isEqual函數：

instance BasicEq Bool where 
isEqual True  True  = True
isEqual False False = True
isEqual _     _     = False

在 ghci 實驗：

*Main>  isEqual  True  True 
True

*Main>  isEqual  False  True 
False

若試圖將不是BasicEq實例類型的值作為輸入調用isEqual函數，
那麼就會引發錯誤：

*Main>  isEqual  "hello"  "moto"

< interactive >:5:1: No instance for (BasicEq [Char])

arising from a use of ` isEqual' Possible fix:
add an instance declaration for ( BasicEq [ Char ])
In the expression:
isEqual "hello" "moto"
In an equation for ` it' : it =
 isEqual "hello" "moto"

錯誤信息提醒我們，[Char]並不是BasicEq的實例類型。

稍後的一節會介紹更多關於類型類實例的定義方式，這裡先繼續前面的例子。這
一次，除了isEqual之外，我們還想定義不等測試函數isNotEqual：

class BasicEq a where
isEqual   :: a -> a -> Bool isNotEqual
 :: a -> a -> Bool 同時定義isEqual和isNotEqual兩個函數產生了一些
不必要的工作：從邏輯上講，對於任何類型，只要知道isEqual或isNotEqual的
任意一個，就可以計算出另外一個。因此，一種更省事的辦法是，為isEqual和
isNotEqual兩個函數提供默認值，這樣BasicEq的實例類型只要實現這兩個函數
中的一個，就可以順利使用這兩個函數：

class BasicEq a where isEqual :: a -> a -> Bool isEqual x y
 = not ( isNotEqual x y )

  isNotEqual :: a -> a -> Bool isNotEqual x y = not 
( isEqual x y ) 以下是將Bool作為BasicEq實例類型的例子：

instance BasicEq Bool where
isEqual False False = True
isEqual True  True  = True
isEqual _   _   = False 

我們只要定義
isEqual函數，就可以“免費”得到isNotEqual：

Prelude > : load BasicEq_3 . hs [ 1 of 1 ] Compiling Main
       ( BasicEq_3 . hs , interpreted ) Ok , modules
 loaded : Main .

*Main> isEqual True True 
True

*Main> isEqual False False 
True

*Main> isNotEqual False True 
True 當然，如果閒著沒事，你仍然可以自己親手定義這兩個函數。但是，你至
少要定義兩個函數中的一個，否則兩個默認的函數就會互相調用，直到程序崩潰
。

6.3.定義類型類實例

定義一個類型為某個類型類的實例就是為某個類型實現給定類型類所聲明的全部函數。

比如在前面，BasicEq類型類定義了兩個函數isEqual和isNotEqual：

class BasicEq a where 

isEqual :: a -> a -> Bool 

isEqual x y = not ( isNotEqual x y )

isNotEqual :: a -> a -> Bool 
isNotEqual x y = not ( isEqual x y )

在前一節，我們成功將Bool類型實現為BasicEq的實例類型
，要使Color類型也成為BasicEq類型類的實例，
就需要另外為Color類型實現
isEqual和isNotEqual：

instance BasicEq Color where 
isEqual Red Red = True 
isEqual Blue Blue = True
isEqual Green Green = True
isEqual _ _ = True 

注意，這裡的函數定義和之前的colorEq函數定義實際上沒有什麼不同，
唯一的區別是，
isEqual不僅可以對Bool類型進行對比測試，還可以對Color類型進行對比測試。

更一般地說，只要為相應的類型實現BasicEq類型類中的定義，
那麼isEqual就可以用於對比任何我們想對比的類型。

不過在實際中，通常並不使用BasicEq類型類，
而是使用Haskell Report中定義的Eq類型類：
它定義了==和/=操作符，
這兩個操作符才是Haskell中最常用的測試函數。

以下是Eq類型類的定義：

class  Eq a  where 
( == ), ( /= ) :: a -> a -> Bool

-- Minimal complete definition: -- (==) or (/=) x /= y   =  not
 ( x == y ) x == y   =  not ( x /= y )

稍後會介紹更多使用 Eq類型類的信息。

6.4.幾個重要的內置類型類

前面兩節分別介紹了類型類的定義，以及如何讓某個類型成為給定類型類的實例
類型。

正本節會介紹幾個Prelude庫中包含的類型類。如本章開始時所說的，類型類是H
askell語言某些特性的奠基石，本節就會介紹幾個這方面的例子。

更多信息可以參考Haskell 的函數參考，那裡一般都給出了類型類的詳細介紹，
並且說明，要成為這個類型類的實例，需要實現那些函數。

Show 

Show類型類用於將值轉換為字符串，它最重要的函數是show。

show函數使用單個參數接收輸入數據，並返回一個表示該輸入數據的字符串：

Main > : type show show :: Show a => a -> String 以下是一些
show函數調用的例子：

Main > show 1 "1"

Main > show [ 1 , 2 , 3 ] "[1,2,3]"

Main > show ( 1 , 2 ) "(1,2)" Ghci輸出一個值，實際上就是對這個值調
用putStrLn和show：

Main > 1 1

Main > show 1 "1"

Main > putStrLn ( show 1 ) 1 因此，如果你定義了一種新的數據類型，並
且希望通過ghci來顯示它，那麼你就應該將這個類型實現為Show類型類的實例，
否則ghci就會向你抱怨，說它不知道該怎樣用字符串的形式表示這種數據類型：

Main > data Color = Red | Green | Blue ;

Main > show Red

< interactive >: 10 : 1 : No instance for ( Show Color ) arising
 from a use of ` show' Possible fix : add an instance
 declaration for ( Show Color ) In the expression : show Red
 In an equation for ` it' : it = show Red

Prelude > Red

< interactive >: 5 : 1 : No instance for ( Show Color ) arising
 from a use of ` print' Possible fix : add an instance
 declaration for ( Show Color ) In a stmt of an interactive
 GHCi command : print it 通過實現Color類型的show函數，讓Color類型
成為Show的類型實例，可以解決以上問題：

instance Show Color where show Red  = "Red" show Green =
 "Green" show Blue  = "Blue" 當然，show函數的打印值並不是非要和類
型構造器一樣不可，比如Red值並不是非要表示為"Red"不可，以下是另一種實例
化Show類型類的方式：

instance Show Color where show Red  = "Color 1: Red" show
 Green = "Color 2: Green" show Blue  = "Color 3: Blue" Read 

Read和Show類型類的作用正好相反，它將字符串轉換為值。

Read最有用的函數是read：它接受一個字符串作為參數，對這個字符串進行處理
，並返回一個值，這個值的類型為Read實例類型的成員（所有實例類型中的一種
）。

Prelude > : type read read :: Read a => String -> a 以下代碼
展示了read的用法：

Prelude > read "3"

< interactive >: 5 : 1 : Ambiguous type variable ` a0' in the
 constraint : ( Read a0 ) arising from a use of ` read'
 Probable fix : add a type signature that fixes these type
 variable ( s ) In the expression : read "3" In an equation
 for ` it' : it = read "3"

Prelude > ( read "3" ) :: Int 3

Prelude > : type it it :: Int

Prelude > ( read "3" ) :: Double 3.0

Prelude > : type it it :: Double 注意在第一次調用read的時候，我們
並沒有顯式地給定類型簽名，這時對read "3"的求值會引發錯誤。這是因為有非
常多的類型都是Read的實例，而編譯器在read函數讀入"3"之後，不知道應該將
這個值轉換成什麼類型，於是編譯器就會向我們發牢騷。

因此，為了讓read函數返回正確類型的值，必須給它指示正確的類型。

使用Read和Show進行序列化

很多時候，程序需要將內存中的數據保存為文件，又或者，反過來，需要將文件
中的數據轉換為內存中的數據實體。這種轉換過程稱為序列化和反序列化 .

通過將類型實現為Read和Show的實例類型，read和show兩個函數可以成為非常好
的序列化工具。

作為例子，以下代碼將一個內存中的列表序列化到文件中：

Prelude > let years = [ 1999 , 2010 , 2012 ]

Prelude > show years "[1999,2010,2012]"

Prelude > writeFile "years.txt" ( show years ) writeFile將給定內容
寫入到文件當中，它接受兩個參數，第一個參數是文件路徑，第二個參數是寫入
到文件的字符串內容。

觀察文件years.txt可以看到，(show years)所產生的文本被成功保存到了文件
當中：

$ cat years . txt [ 1999 , 2010 , 2012 ] 使用以下代碼可以對years.txt
進行反序列化操作：

Prelude > input <- readFile "years.txt"

Prelude > input          --讀入的字符串 "[1999,2010,2012]"

Prelude > ( read input ) :: [ Int ]   --將字符串轉換成列表 [ 1999
 , 2010 , 2012 ] readFile讀入給定的years.txt，並將它的內存傳給input變
量，最後，通過使用read，我們成功將字符串反序列化成一個列表。

6.1.數字類型

Haskell 有一集非常強大的數字類型：從速度飛快的32 位或64 位整數，到任意
精度的有理數，包羅萬有。

除此之外，Haskell 還有一系列通用算術操作符，這些操作符可以用於幾乎所有
數字類型。而對數字類型的這種強有力的支持就是建立在類型類的基礎上的。

作為一個額外的好處（side benefit），用戶可以定義自己的數字類型，並且獲
得和內置數字類型完全平等的權利。

以下表格顯示了Haskell 中最常用的一些數字類型：

表格6.1 ： 部分數字類型

類型	介紹 Double	雙精度浮點數。表示浮點數的常見選擇。 Float	單精度
浮點數。通常在對接C 程序時使用。 Int	固定精度帶符號整數；最小範圍在-
2^29 至2^29-1 。相當常用。 Int8	8 位帶符號整數 Int16	16 位帶符號整
數 Int32	32 位帶符號整數 Int64	64 位帶符號整數 Integer	任意精度帶
符號整數；範圍由機器的內存限制。相當常用。 Rational	任意精度有理數。保
存為兩個整數之比（ratio）。 Word	固定精度無符號整數。佔用的內存大小
和Int相同 Word8	8 位無符號整數 Word16	16 位無符號整數 Word32	32 位
無符號整數 Word64	64 位無符號整數大部分算術操作都可以用於任意數字類
型，少數的一部分函數，比如asin，只能用於浮點數類型。

以下表格列舉了操作各種數字類型的常見函數和操作符：

表格6.2 ： 部分數字函數和

項	類型	模塊	描述 (+)	Num a => a -> a -> a	Prelude	加法
 (-)	Num a => a -> a -> a	Prelude	減法 (*)	Num a => a -> a ->
 a	Prelude	乘法 (/)	Fractional a => a -> a -> a	Prelude	份數除法
 (**)	Floating a => a -> a -> a	Prelude	乘冪 (^)	(Num a,
 Integral b) => a -> b -> a	Prelude	計算某個數的非負整數次方 (^^)
	(Fractional a, Integral b) => a -> b -> a	Prelude	份數的任意整數
次方 (%)	Integral a => a -> a -> Ratio a	Data.Ratio	創建比率 (.&.)
	Bits a => a -> a -> a	Data.Bits	二進制並操作 (.|.)	Bits a =>
 a -> a -> a	Data.Bits	二進製或操作 abs	Num a => a -> a
	Prelude	絕對值操作 approxRational	RealFrac a => a -> a ->
 Rational	Data.Ratio	通過分數的分子和分母計算出近似有理數 cos
	Floating a => a -> a	Prelude	餘弦函數。另外還有acos 、 cosh 和
acosh ，類型和cos 一樣。 div	Integral a => a -> a -> a	Prelude	整
數除法，總是截斷小數位。 fromInteger	Num a => Integer -> a
	Prelude	將一個Integer 值轉換為任意數字類型。 fromIntegral
	(Integral a, Num b) => a -> b	Prelude	一個更通用的轉換函數，將任
意Integral 值轉為任意數字類型。 fromRational	Fractional a =>
 Rational -> a	Prelude	將一個有理數轉換為分數。可能會有精度損失。 log
	Floating a => a -> a	Prelude	自然對數算法。 logBase	Floating a
 => a -> a -> a	Prelude	計算指定底數對數。 maxBound	Bounded a => a
	Prelude	有限長度數字類型的最大值。 minBound	Bounded a => a
	Prelude	有限長度數字類型的最小值。 mod	Integral a => a -> a -> a
	Prelude	整數取模。 pi	Floating a => a	Prelude	圓周率常量。 quot
	Integral a => a -> a -> a	Prelude	整數除法；商數的分數部分截斷為
0 。 recip	Fractional a => a -> a	Prelude	分數的倒數。 rem
	Integral a => a -> a -> a	Prelude	整數除法的餘數。 round
	(RealFrac a, Integral b) => a -> b	Prelude	四捨五入到最近的整數。
 shift	Bits a => a -> Int -> a	Bits	輸入為正整數，就進行左移。如果
為負數，進行右移。 sin	Floating a => a -> a	Prelude	正弦函數。還提
供了asin 、 sinh 和asinh ，和sin 類型一樣。 sqrt	Floating a => a ->
 a	Prelude	平方根 tan	Floating a => a -> a	Prelude	正切函數。還提
供了atan 、 tanh 和atanh ，和tan 類型一樣。 toInteger	Integral a =>
 a -> Integer	Prelude	將任意Integral 值轉換為Integer toRational
	Real a => a -> Rational	Prelude	從實數到有理數的有損轉換 truncate
	(RealFrac a, Integral b) => a -> b	Prelude	向下取整 xor	Bits a
 => a -> a -> a	Data.Bits	二進制異或操作數字類型及其對應的類型類列舉
在下表：

表格6.3 ： 數字類型的類型類實例

類型	Bits	Bounded	Floating	Fractional	Integral	Num	Real
	RealFrac Double	 	 	X	X	 	X	X	X Float	 	 	X	X
	 	X	X	X Int	X	X	 	 	X	X	X	 Int16	X	X
	 	 	X	X	X	 Int32	X	X	 	 	X	X	X	 Int64	X
	X	 	 	X	X	X	 Integer	X	 	 	 	X	X	X
	 Rational or any Ratio	 	 	 	X	 	X	X	X Word	X	X
	 	 	X	X	X	 Word16	X	X	 	 	X	X	X	 Word32	X
	X	 	 	X	X	X	 Word64	X	X	 	 	X	X	X	 表格
6.2 列舉了一些數字類型之間進行轉換的函數，以下表格是一個匯總：

表格6.4 ： 數字類型之間的轉換

源類型	目標類型 Double, Float	Int, Word	Integer	Rational Double,
 Float Int, Word Integer Rational	fromRational . toRational
 fromIntegral fromIntegral fromRational	truncate * fromIntegral
 fromIntegral truncate *	truncate * fromIntegral N/A truncate *
	toRational fromIntegral fromIntegral N/A *除了truncate之外，還可以
使用round、ceiling或者float。

第十三章會說明，怎樣用自定義數據類型來擴展數字類型。

相等性，有序和對比

除了前面介紹的通用算術符號之外，相等測試、不等測試、大於和小於等對比操
作也是非常常見的。

其中，Eq類型類定義了==和/=操作，而>=和<=等對比操作，則由Ord類型類定義
。

需要將對比操作和相等性測試分開用兩個類型類來定義的原因是，對於某些類型
，它們只對相等性測試和不等測試有興趣，比如Handle類型，而部分有序操作（
particular ordering ，大於、小於等）對它來說是沒有意義的。

所有Ord實例都可以使用Data.List.sort來排序。

幾乎所有Haskell內置類型都是Eq類型類的實例，而Ord實例的類型也不在少數。

6.5.自動衍生

簡單數據類型， 
Haskell編譯器可自動將類型衍生（derivation）為
Read、Show、Bounded、Enum、Eq和Ord的實例。

以下代碼將Color類型衍生為Read、Show、Eq和Ord的實例：

data Color = Red | Green | Blue deriving (Read, Show, Eq, Ord)

測試：

*Main> show Red 
"Red"

*Main>(read "Red") :: Color 
Red

*Main> ( read "[Red, Red, Blue]" ) :: [ Color ] 
[ Red , Red , Blue ]

*Main> Red == Red 
True

*Main> Data . List . sort [ Blue , Green , Blue , Red ] 
[ Red , Green , Blue , Blue ]

*Main> Red < Blue 

True

注意Color類型的排序位置由定義類型時值構造器的排序決定。

自動衍生並不總是可用的。
比如說，如果定義類型
data MyType = MyType (Int -> Bool)，
那麼編譯器就沒辦法衍生MyType為Show的實例，
因為它不知道該怎麼將MyType函數的輸出轉換成字符串，這會造成編譯錯誤。

除外，當使用自動推導將某個類型設置為給定類型類的實例時，
定義這個類型時所使用的其他類型，
也必須是給定類型類的實例（通過自動推導或手動添加的都可以）。

舉個例子，以下代碼不能使用自動推導：

data Book = Book

data BookInfo = BookInfo Book deriving ( Show )

Ghci會給出提示，
說明Book類型也必須是Show的實例，
BookInfo才能對Show進行自動推導：

Prelude >:load cant_ad.hs 
[1 of 1] Compiling Main( cant_ad.hs, interpreted)

ad.hs:4:27: No instance for ( Show Book ) arising from
 the 'deriving' clause of a data type declaration

Possible fix : add an instance declaration for ( Show Book ) or use a
 standalone 'deriving instance' declaration , so you can
 specify the instance context yourself When deriving the
 instance for ( Show BookInfo ) Failed , modules loaded : none.

相反，以下代碼可以使用自動推導，因為它對Book類型也使用了自動推導，
使得Book類型變成了Show的實例：

data Book = Book deriving ( Show )

data BookInfo = BookInfo Book deriving ( Show ) 使用:info命令在
ghci中確認兩種類型都是Show的實例：

Prelude >:load ad.hs [ 1 of 1 ] 
Compiling Main (ad.hs, interpreted ) Ok,
modules loaded : Main.

*Main> : info Book 
data Book = Book   -- Defined at ad.hs:1:6 instance Show Book
 -- Defined at ad.hs:2:23

*Main> : info BookInfo 
data BookInfo = BookInfo Book  -- Defined at ad.hs:4:6 instance
 Show BookInfo -- Defined at ad.hs:5:27 討論 



Record 語法
...........

Record 語法如下：

data Car = Car { company :: String
               , model :: String
               , year :: Int
               } deriving (Show)


值建構子如下：

ghci>c = Car {company="Ford", model="Mustang", year=1967} 
Car {company = "Ford", model = "Mustang", year = 1967}

建構 Car 時各屬性順序是無關，只有一個值建構子的形態稱為紀錄類型：

Record 語法也會自動生成屬性存取函數如下：

ghci> :t company 
company :: Car -> String 

ghci> company c
"Ford"

另外不必每個屬性都要有預設值，不過會出現警告如下：

ghci>c = Car {company="Ford", year=1967} 

    Warning: Fields of `Car' not initialised: model
    In the expression: Car {company="Ford", year=1967}
    In an equation for `c': c = Car {company="Ford", year=1967}

另外支援更新函數，會以某值識別子加入如下：

ghci>let d = c{year=1999}
Car {company = "Ford", model = "Mustang", year = 1999}
