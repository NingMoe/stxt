雜湊表
------

雜湊表是一種搜尋結構，能快速以鍵值存取物件。

其內部是以一個陣列來儲存物件，
新增物件時，先經由雜湊函數把資料的鍵值轉成陣列的索引，
並將資料存放於該索引位置中。
要以鍵值存取物件時，
雜湊函數把資料的鍵值轉成陣列的索引後存取元件。

此結構的名稱源自雜湊函數，
而雜湊函數的名稱又源自菜名雜湊(hash)，該菜是把所有材料切碎後，再混和。

雜湊函數
........

*H: L->S, |L|>>|S|	
雜湊函數是一個定義域遠大於值域的函數，
所以可以把變化範圍很大的物件，用較為有限的資源來儲存，
因為我們不可能有無限多的資源。
但為了快速能找到儲存的物件，
故函數應儘可能滿足下列的條件：

H(x)!=H(y)→x!=y
H(x)=H(y)→x=y

滿足上述條件的函數，必需對任易輸入值，
其輸出值分佈接近隨機值。

碰撞處理
........

x!=y, H(x)=H(y)
的情況即 2 個不同鍵值，
卻得到同樣的雜湊位址稱作碰撞 collison 或同物異名 synonym。

一般處理碰撞有二個方法，鏈結法及位址展開法。

負載因子
........

負載因子公式如下：

負載因子 = 元素數目/槽數目

當負載因子太高時，表示雜湊表可用槽數目太少，
容易產生碰撞，使存取元素效能降低。
負載因子太低，表示空槽太多，表示太多記憶體空間閒置。


位址展開法
..........

位址展開法指遇到碰撞時依照某種探勘序列(probing sequence)
在儲存實體中找尋可用位址。

def prob(a)       # a 為碰撞位址
  i=1
  a=PS(a) until avaiable? a   # 從探勘序列中遞迴取出 a，直到 a 為可用位址
end

探勘序列
++++++++
PS: A -> A, A 為位址

探勘序列為一個函數，
其接受碰撞的位址，傳回一位址，
探勘序列的採用必須考慮下列問題：

*是否能探勘到所有可能的位址？
*是否形成群聚現象(clustring)？	

常用的探勘序列，有下列三種：

線性探勘
++++++++

LP(c)=c+f mod |a|, a 為總位址數

線性探勘是把碰撞位址 c 加上一固定距離 f。	
由於線性探勘本質為模 n 加法，故為能探勘到所有可能的位址，
則必須限定位址桶數 n 必須為質數，或者 f 必須與 n 互質，
其原理可由循環群之生成元定理得知。

平方探勘(quadratic probing)
QP(c,t)=c+t2 mod |a|

平方探勘是把探勘位址的距離依探勘次數 t 的平方成長。

雙重雜湊法
++++++++++

DP(c,t)=H'(c) mod |a|
交替使用另一個不同的雜湊函數來計算下個可用位址。
線性及平方探勘可視為簡易的雜湊函數。

鏈結法
++++++

雜湊位址是存放指到另一鏈結串列的指標，
當產生目標位址的元素時，則將元素加到串列的後面，
此法不會有碰撞產生。

鏈結法比位址展開法有更多的優點：

*實作簡單
*不易有群聚現象
*元素增加時，位址展開會突然的效率減低，而鏈結法效率減低較為平穩
*使用較少的記憶空間，位址展開法在元素少時通常為稀疏陣列

訊息摘要
........

第二個條件在加密法中是重要的因素，接近第二個條件的函
數，可以用來製作 MD 訊息摘要，稱作摘要是因為函數值域
	小於定義域，故 MD 長度必小於原始訊息。又由於函數接近
	第二個條件，故原始訊息的一點變動則其 MD 也會不同，我
	們就可用 MD 來判讀所得的檔案有無被修改過，常見的 MD
	有 MD5 及 SHA 函數。

	*循環群之生成元定理	
	若 a 為循環群 Zn 之生成元，則由 b=a^s 所生成之循環子
	群 H 其元素個數為 n/d，其中 d=gcd(n,s)。
	此定理可推論出 Zn 所有生成元集合 
	G={a^r|gcd(n,r)=1}。
	
	*模 n 加法	
	由於模 n 加法為一循環群，且 1 為其當然生成元，依上述
	定理，可以得知模 n 加法的生成元集合 G={r|gcd(n,r)=1}
	為所有與 n 互質的整數。



模 n 函數
.........

MFn: Z->n, |Z|=infinite, |n|=n

模數函數是一個簡易的雜湊函數，其定義域為所有整數，而
值域為 [0,m]。


