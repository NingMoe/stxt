Turing 1936 之論文筆記
----------------------
2013/02/11 週一於娘家

1.a-machine

自動機(automatic machines)指機器之運作完全由狀態決定。

1.1.c 機

其對比是選擇機(choice machine)，
當運作至模糊狀態時，須由外部操作員作出決定，
機器才能開始運作。

2.symbol

2.1.figure

數字僅含 0 及 1 兩種符號，
又稱為第一類符號(symbols of the first kind)。

2.2.symbols of the second kind

第二類符號是除了 0 及 1 的所有符號，
也就是第一類符號的補集。

2.3.符號是有限

自動機之符號是有限的。

3.m-configuration

機器狀態指機器之內部狀態，
由外界無法觀察到。

利用機器狀態的轉變，
機器可有效的記住之前掃描的符號。

10.alternative squares
交替格法

Turing 把帶子視為F格及E格交替接續。

10.1.F 格

F 格用在存放計算出的數字。

10.2.E 格

E 格(E squares)指暫存格，E 表示 eraseble。

10.3.mark

F 格 S 緊鄰右一個之 E 格，若其符號為α，
則稱 S 以 α 標示。

前鎮2013/02/15 週五 

4.table

指令表描述機器的行為，
包含一組有限之指令，
故機器之行為可以用有限字元來描述。

每條指令有 4 個欄位：
分別為機器狀態、掃描符號、操作及最終機器狀態，

機器狀態、掃描符號描述狀態，
而操作及最終機器狀態描述行為。

花蓮 2013/03/17 週日 

4.1.機器狀態

機器狀態包含一組小寫英文字母。

4.2.掃描符號

符號由英數字組成；
或 None 表任何符號均符合。

4.3.操作

操作一般由印出符號指令及移動指令組成，可為下列之串列：

Pα 印出符號 α 
E  刪除符號

R  右移
L  左移

4.4.I 機 

I 機可印出數列 010101....
規則表如下：

b None P0,R c  狀態b命名源自 begin，指開始狀態。
c None    R e
e None P1,R f
f None    R b

4.5.簡化表

簡化表允許操作可包含多個移動指令。

4.6.I 機簡化表

I 機簡化表如下：

b None P0     b
  0    R,R,P1 b
  1    R,R,P0 b

4.7.II 機

II 機可印出 001011011101111011111... 之數列。

本文以國際音標  X-SAMPA 的 @ 來表示原文之音標字母。

啟動時 II 機會在紙帶上印出 @@0，之後會在奇數格印出數字，這是交替格法，
@@ 是用來定位用的。

II 機簡化表如下：

b             P@,R,P@,R,P0,R,R,P0,L,L o 以表啟動(begin)之 b 作為啟始狀態

o 1           R,Px,L,L,L              o 將 1 標記 x
  0                                   q           

q Any(0 or 1) R,R                     q 在數列後印出 1
  None        P1,L                    p

p x           E,R                     q 刪除 x 右移轉到 q 再印 1
  @           R                       f
  None        L,L                     p

f Any         R,R                     f
  None        P0,L,L                  o

5.標準指令表
義仁 2013/02/15 星期五 

標準指令表中每條規則有 5 個欄位。

qi Sj Sk M ql 

分別表示機器狀態為 qi 、掃描符號為 Sj，
下一步動作為印出 Sk、移動指令為 M ，機器狀態轉換為 ql。

移動指令 M 有三種情形如下表：
R 右移
L 左移
N 不移動

5.1.qi

qi 表示第 i 個狀態。

預定狀態如下表：

q1 初始狀態

5.2.Si

Si 表示第 i 個符號。

預定符號如下表：

表示 符號
S0   空格
S1   0
s2   1

5.3.刪除操作

刪除操作 E 以 PS0 表示。
如下例：
qi Sj E  ,R qm
qi Sj PS0,R qm

5.4.移動操作

移動操作以印出掃描符號後移動表示。
如下例：
qi Sj     R qm
qi Sj PSj,R qm

6.S.D

標準描述(Standard Description)
僅含 A, C, D, L, R, N, ; 之符號列，
用來描述機器之指令表。

每條指令以 ; 符號分隔。

R 右移
L 左移
N 不移動
; 分隔指令

14.3.正規表示轉換為 S.D

qi 由一個 D 後面重覆 i 個 A 表示。

Sj 由一個 D 後面重覆 j 個 C 表示。

由上述規則可知 D 字元之選用源自英文的分隔字元(Delimiter)。

宿舍 2013/03/17 週日 

7.D.N

Description Number，描述數

S.D 用下面規則所轉成的數列。

A=1
C=2
D=3
L=4
R=5
N=6
;=7

8.skeleton table

在骨架表中，大寫德文為狀態變數，小寫希臘文為符號變數。

8.1.f(C, B, α)

找出第一個(最左邊)之 α 符號，8
若找到狀態轉為 C；沒找到則轉為 B。

命名源自 first。

f (C, B, α) @      L f1(C, B, α)
            not  @ L f (C, B, α)

f1(C, B, α) α        C
            not  α R f1(C, B, α)
            None   R f2(C, B, α)

f2(C, B, α) α        C
            not  α R f1(C, B, α)
            None   R B

8.2.e(C, B, α)

刪除第一個 α 符號轉為 C；沒找到則轉為 B。

 e(C, B, α)   f(e1(C, B, α), B, α)
e1(C, B, α) E C

e(B, α) 刪除所有 α 符號轉為 B。

 e(B, α)      e( e(B, α)   , B, α) 

e(C) 刪除所有標記。

 e(C) @     R     e1(C)
      Not @ L      e(C)

e1(C) Any   R,E,R e1(C)
      None        C

8.3.機器狀態變數

e(C, B, α)中，C 及 B為狀態變數，α 為符號變數，
e 則稱為機器狀態變數(m-configuration functions)，
簡寫為 m-函數(m-functions)，表示任一個機器狀態。

設某個機器的 m-狀態有 e(b,x) 或以 q 表示 e(b,x)，
則命令行如下：

e(b,x)      e(e(b,x),b,x)

或是

q           e(q     ,b,x)

完整的規則表應出現下列規則：

q           e(q        ,b,x)
e(q,b,x)    f(e1(q,b,x),b,x)
e1(q,b,x) E q

若再以q' 取代 e(q,b,x)，
並利用取代得出表示 m-狀態函數 f 之表，
則可得不具任何 m-狀態函數之規則表。 

8.4.pe(C,β)

從狀態 pe(C,β) 開始，
機器於數列尾端印出 β 後轉入狀態 C。 

命名源自 print at end。

 pe(C,β)            f(pe1(C,β),C,@)
pe1(C,β)   Any  R,R pe1(C,β)
           None pβ  C

從狀態 pe2(C,α,β) 開始，
機器於數列尾端印出 α 及 β 後轉入狀態 C。 

pe2(C,α,β)          pe(pe(C,β),α) 

8.5.l(C) 與 r(C)

l(C) L C 左移一格，命名源自 left。

r(C) R C 右移一格，命名源自 right。

8.6.f'(C, B, α) 與 f''(C, B, α)

f' 同 f，但是在轉移至 B 前，會先左移一格。
f'' 則會先右移一格

f' (C, B, α)   f(l(C), B, α)
f''(C, B, α)   f(r(C), B, α)

8.7.c(C, B, α)

找出第一個標記為 α 的符號 β，並於數列尾端印出 β。

c 源自於複製之英文，copy。

最後一行的轉成表必須每個機器可印之符號，
取代 β 並形一個新的指令。

 c(C, B, α)   f'(c1(C),B,α) 移到第一個標記為 α 的符號 β。
c1(C      ) β pe(C,β)       於尾端印出 β

8.8.ce(B,α)

將所有標記為 α 的符號於數列尾端印出，並清除標記 α。

ce 源自於複製並清除標記之英文，copy and erase。

 ce(B,  α) ce(ce(B,α),B,α)
 
 ce(C,B,α) c(e(C,B,α),B,α) 找出第一個標記為 α 的符號，
                           並於數列尾端印出，再刪除第一個符號標記。

標記為 α 的符號於數列尾端印出，
再將標記為 β 的符號於數列尾端印出，並清除標記 α 及 β。

ce2(B,α,β) ce(ce(B,β),α)   
                          
標記為 α 的符號於數列尾端印出，
再將標記為 β 的符號於數列尾端印出，
最後將標記為 γ 的符號於數列尾端印出，
並清除標記 α、β 及 γ。

ce3(B,α,β,γ) ce(ce2(B,β,γ),α)   


8.9.re(B, α, β)

將所有符號 α 以 β 取代。

命名源自取代之英文 replace。

 re(B,α,β)         re(re(B,α,β),B,α,β)

 re(C,B,α,β) E,Pβ f(re1(C,B,α,β),B,α)  將第一個符號 α 以 β 取代。
re1(C,B,α,β) E,Pβ C

8.10.cr(B,α)

cr(B,α) 將所有標記為 α 的符號於數列尾端印出，但不清除標記 α。

cr(C,B,α) c(re(C,B,α,β),B,α)        找出第一個標記為 α 的符號γ，
                                    並於數列尾端印出 γ，
                                    再將標記 α 用 β 取代。
cr(B,α)   cr(cr(B,α),re(B,β,α),α)   所有標記為 α 的符號於數列尾端印出，
                                    再將標記 β 還原成 α。
8.11.cp(C,A,E,α,β)

比較第一個 α 標記之符號 γ 及第一個 β 標記之符號 δ，
若符號相同則轉入狀態 C，符號不同或只有沒有α標記符號則轉入 A，
沒有 α 或 β 標記之符號則轉入 E。

 cp(C,A,E,α,β)       f'(cp1(C,A,β), f(A,E,β), α)
cp1(C,A,    β) γ     f'(cp2(C,A,γ), A       , β)

cp2(C,A,    γ) γ     C
               not γ A

8.12.cpe(C,A,E,α,β)

cpe 與 cp 不同在於，比較第一個 α 標記之符號 γ 及第一個 β 標記之符號 δ，
若符號相同則轉入刪除 γ 及 δ 。

命名源自比較及刪除(compare and erase)。

cpe(C,A,E,α,β) cp(e(e(C,C,β),C,α),A,E,α,β)

比較 α 標記之數列 Sα 及 β 標記之數列 Sβ，
若相同則進入 E，其餘情形進入 A，
一些 α 及 β 會被刪除。

cpe(A,E,α,β) cpe(cpe(A,E,α,β),A,E,α,β)

8.13.g(C, α)

找最後一個符號 α，
若找到後轉入 C。

命名應源自 go。

g (C)    Any   R g (C)       移到最後一格，並轉移至狀態 C。
         None  R g1(C)

g1(C)    Any   R g (C)
         None  R C

g (C, α)         g(g1(C, α)) 先移到最後一格，再往回找符號 α

g1(C, α) α       C           往回找符號 α
         not α L g1(C, α)

9.computing machine

只能印出第一類及第二類符號的自動機稱為計算機。

9.1.circular{p.233}

circular 機器會進入某個狀態，
此狀態不是停機，就是機器只能不斷印出第二類符號。

9.2.circle-free{p.233}

機器能不斷印出數字。

9.3.sequence

數字序列，簡稱為序列，或數列(figures)。

9.4.sequence computed by the machine

由一台圖靈機所印出的數列稱作機器計算之數列。

9.5.S(M)

非論文，由我所加的定義。

義仁老家 2013/02/14 星期四 

S(M) 表示由機器 M 所印出的數列。

9.6.number computed by the machine

機器計算之數字為其計算之數列前加一個小數點所表示之實數。

15.computable sequence

可計算數列為能由一台circle-free機器所印出的數列。

15.1.computable number

可計算數為其數字能由一台機器所印出的數列，
其不包括所有可定義之數，
但不可列舉。

花蓮 2013/02/19 星期二 

16.滿足數

一個 circle-free 之機器之 D.N。

本論文證明沒有一般方法可決定數字 n 是否為滿足數。

17.M(n)

表示機器 M 其 D.N 為 n。
 
18.U

U 表示通用機器，
在磁帶開始置入任一機器 M 之 S.D，
則 U 可印出和 M 一樣的數序。

這項創舉讓程式表示和資料都可放在同一個紙帶中。

18.1.complete configuration

完整狀態包含當時紙帶上所有的符號，
並將狀態列於掃描符號之下。

2 個接續的完整狀態以冒號 ":" 分隔
(本文@為X-SAMPA的國際音標來表示原文之字母)。

 :@@0 0:@@0 0:@@0 0:@@0 0   :@@0 0 1:
b   o     q       q        q      p

花蓮 2013/02/19 星期二 

18.1.1.C

除了將狀態列於掃描符號之下，
也可掃描符號左方插入一格，並填入機器狀態。
如數列 C：

b:@@o0 0:@@q0 0:... (C)

第二種寫法可於一行記下所有完整狀態，
有理論上之用途。

18.1.2.D.N 表示法

把機器狀態及符號轉成 D.N，
其中機器狀態 o 以 DAA、q 以 DAAA 取代，
而符號 @ 以 DCCC 取代可得表示完整狀態之數列 C1 如下：

DA:DCCCDCCCDAADCDDC:DCCCDCCCDAAADCDDC:... (C1)

18.3.M'

M' 可於 F 格接續印出完整狀態。

18.4.U 可印的符號
花蓮 2013/02/21 星期四 

U 可印的符號如下表：

A
C
D
0
1
u 標記關聯完整狀態之指令印出之符號
v 標記最後完整狀態之狀態前一符號之前的符號列
w 標記最後完整狀態之狀態之後的符號列
x 標記最後完整狀態之狀態前一符號
y 標記關聯完整狀態之指令之最終機器狀態
z

18.5.b

b 在 "::" 後印出 :DA 表示初始狀態，後轉入 anf 狀態。

b                       f(b1, b1, ::)
b1 R,R,P:,R,R,PD,R,R,PA anf

18.6.anf

anf 命名源自德文 anfangen 表示啟動。

把最後一個完整狀態的狀態標記為 y，
再轉移至 kom。

長遠看來，anf 會找到最後一個完整狀態關聯的指令，
之後可由標記為 z 的分號，找到指令。
並轉移至 sim。

anf   g  (anf1, :)
anf1  con(kom, y)

18.7.kom

kom 命名源自德文 komparation 表示比較。

kom 找到最後一個沒有標記 z 之分號 ";" ，
把它標記為 z，並把之後的狀態標記為 x。

等同於把指令表最後一個沒有標記 z 指令的分隔號標為 z，
狀態標為 x。

kom ;           R, Pz, L con(kmp, x)
    z           L, L     kom
    not z nor ; L        kom

18.8.kmp

比較 x 所標記的指令之狀態，
及 y 所標記的完整狀態之狀態，
若一樣則轉移 sim，其它則轉移至 kom。

再去除 x 及 y。

kmp cpe(c(kom, x, y), sim, x, y)

18.9.sim

將要執行的指令之操作標為 u，
而要轉換之狀態標為 y，
再清除 z 標記。 

再進入 mk。

sim                   f'(sim1, sim1, z)

sim1                  con(sim2,)

sim2 A                sim3              
     not A R,Pu,R,R,R sim2               若不是 A 則為操作字元，
                                         標記 u。
                                   
sim3 not A L,Py       e(f, z)            
     A     L,Py,R,R,R sim3               若是 A 則是轉換狀態，標為 y。


18.10.mk

完整狀態被分為 4 部份，

狀態部份不標記，狀態前一符號以 x 標記，
狀態前一符號之前的符號串列第一部分以 v 標記，
狀態之後的符號串列以 w 標記。

最後印出 ":"，再轉移至 sh。

命名源自標記 mark。

mk                   g(mk1, :)

mk1 not A R,R        mk1
    A     L,L,L,L    mk2

mk2 C     R,Px,L,L,L mk2
    :                mk4
    D     R,Px,L,L,L mk3

mk3 not : R,Pv,L,L,L mk3
    :                mk4

mk4                  con(r(r(mk5)),)

mk5 any   R,Pw,R     mk5
    None  P:         sh


:DCCCDCCDAADCDDC

會被 mk 標記成

:DCCCDCCDAADCDDC:
 vvvvxxx     www

18.11.sh

花蓮 2013/02/22 星期五 

找到 u 標記的印出符號指令，
並於尾端印出 0: 或 1: 之符號。

sh                f(sh1,inst,u)

sh1       L,L,L   sh2

sh2 D     R,R,R,R sh2
    not D         inst

sh3 C     R,R     sh4
    not C         inst

sh4 C     R,R     sh5
    not C         pe2(inst,0,:)

sh5 C             inst
    not C         pe2(inst,1,:)

18.12.inst
2013/02/23 星期六 花蓮  

inst 名稱源自 instruction，
會執行標記之指令，後寫下下一個完整狀態。

inst           g(l(inst1),u)

inst1    α R,E inst1(α)

inst1(L)       ce5(oo,v,y,x,u,w)

inst1(R)       ce5(oo,v,x,u,y,w)

inst1(N)       ce5(oo,v,x,y,u,w)

ov             e(anf)            命名源自英文結束(over)

19.可計算數列是可列舉的

因為每個可計算數列至少對應一個 D.N，
而沒有 D.N 可對應2個以上之可計算數列，
所以可計算數列是可列舉的。

20.可計算數列是不可列舉

假設可計算數列是可列舉的，可作以下定義。

歸謬法證明 β 數列不可計算

義仁 2013/02/13 星期三

令 αn    表示第 n 個可計算數列。
   φn(m) 表示第 n 個可計算數列中第 m 個數字。
   β 數列其第 n 個數字為 1 - φn(n)。

設 β 數列是可計算的，
且為第 K 個可計算數列，
β 數列可以下式定義：

1 - φn(n) = φK(n)

令 n = K 則

1 - φn(n) = φn(n)

可得

1 = 2φn(n)

因為 1 不可能為偶數，故 β 數列不可計算

20.5.

β 數列是否可計算，
等同於是否能以有限步驟完全列舉可計算數列。

是否能以有限步驟完全列舉可計算數列，
等同於是否存在一般方法去判定某數 n 是否為 circle-free 機器之 D.N，
也就是判定 n 是否為滿足數。 

20.7.歸謬法證明 D 機為 circular 

D 機其功能為給定一個 S.D，
則可判定此 S.D 是表示 circular 或 circle-free 之機器。

若為 circular 機器之 S.D 則將其標記 u，
表示不可滿足(源自 unsatisfactory)；

若為 circle-free 機器之 S.D 則將其標記 s，
表示可滿足(源自 satisfactory)。

假設 D 為 circle-free 機器

20.8.β' 數列

β' 數列第 n 個數字為 φn(n)。

20.9.H 機

H 機會以 1, 2, 3, .. , N-1, N, ... 等遞增方式列舉數字，
並作下列處理。

設此步驟已列舉至N ，
H 會先用 D 去判斷該數字 N 是否為滿足數，
若為滿足數，則 R(N) = R(N-1) + 1，

並將 N 轉成 S.D 再用 U 模擬 M(N) 印出其所計算之數列至第 R(N) 個數字，
再把第 R(N) 個數字附加到 β' 數列。

N 不為滿足數時，則 R(N) = R(N-1)。

20.9.1.H 行為

N = 0
R = 0
do 
    N = N+1
    if D(N) == s then
        R    = R + 1    
        Rth = U(N)[R]
        β'   = β' . S
loop

20.9.2.R(Record)

R 這個變數用來記錄共列舉出幾個可計算數。

R 0  = 0
R(N) = R(N-1) + 1 | D(N) == s
       R(N-1)     | otherwise

20.10.K

K 為 H 之 D.N。

20.11.H 無法計算第 R(K) 之數 

當 H 計算第 R(K) 之數字時，
由 H 之建構，可知其為 circle-free 機器，
故 K 應為滿足數，其不能標記為 "u"。

但是若其標記為 "s" 時，
則 H 先利用 U 模擬 M(K) 計算至第 K-1 之數列，
但 M(K) 要求第 R(K) 個數字時，
因為 M(K) = H，
又回到 M(K) 即是 H 的 U 模擬 M(K) 計算至第 K-1 之數列，
如此循環反復，第 R(K) 個數字永遠無法找到，
故 H 為 circular 機器。

21.E

給定任何機器 M 之 S.D 給 E，
E 能判定 M 是否會永遠印出 0。

21.1.Mi
2013/02/14 星期四 義仁

M1 會將 M 所計算之數列 S(M) 前 1 個 0 改成 ()，
原文為 0-bar。

M2 會將 M 所計算之數列 S(M) 前 2 個 0 改成 ()。

Mi 會將 M 所計算之數列 S(M) 前 i 個 0 改成 ()。

21.2.Mi之例子

假設 M 印出下面的數列。
M  = ...AB0 1AB0 0 10 AB...
則 Mi 會印出
M1 = ...AB()1AB0 0 10 AB...
M2 = ...AB()1AB()0 10 AB...
M2 = ...AB()1AB()()10 AB...
M2 = ...AB()1AB()()1()AB...

crunch out
Slang To perform operations on; manipulate or process (numerical or mathematical data)

21.2.F

給定任何機器 M 之 S.D 給 F，
F 能依序印出 M1, M2, ... 之 S.D。

21.3.G

G 接受一機器 M ，並利用 F 印出 M1, M2, ...之 S.D。
再利用 E 測試 M, M1, M2,... 之 S.D，
若 E 判斷輸入之機器永遠不印出 0，則印出 :0:。

G 的行為有三種。
G 會停止，若所有的 Mn 都會印出 0。
G 會不停的印出 0，若 M 不會印出 0。
G 會印出 0 後停止。

21.4.E(G)

2013/02/14 星期四 前鎮娘家

E 判定 G 永遠不會印出 0，
則表示 M 會永遠的印出 0。

E 判定 G 會印出 0，
則表示 M 不會永遠的印出 0。

21.5.G'

G 的行為有三種：
G 會停止，若所有的 Mn 都會印出 1。
G 會不停的印出 1，若 M 不會印出 1。
G 會印出 1 後停止。

21.7.E(G')

E 判定 G 永遠不會印出 1，
則表示 M 會永遠的印出 1。

E 判定 G 會印出 1，
則表示 M 不會永遠的印出 1。

21.8.結合 E(G) 及 E(G')可得出判定 M 是否為 circle-free之機器。

21.9.由前得判定機器不存在，依歸謬法可知 E 不存在。

24.簡單操作

簡單操作只能改變正觀察到之方格符號。

24.1.immediately recognisable

直接辨識(immediately recognisable)指正掃描的數字，
或被單一符號標示之數列。

如以下數列：
1u2u3u4v5v6v

123 被 u標示，視為一組；456被v標示視為一組可直接辨識之數列。

25.利用函數計算定義可計算函數

若將希爾伯特之函數計算(functional calculus)修正比較系統化，
且只只用有限符號，則可建置一個自動機 K 找出所有可證明之公式。

宿舍 2013/03/17 週日 

25.1.F(x, y)

後繼函數，繼承 Gödel 1930 年論文之用法，
命名源自德文 nachfolger。

F(x, y) <-> y == x + 1

前鎮2013/02/15 週五 

25.2.N(x)

令 N(x) 為 x 為是否為非負整數。

25.3.P

命名源自皮亞諾公理，定義如下： 

  (E u)N(u) 
& (x)(N(x) -> (Ey) F(x,y))  若 x 為非負整數，必有 y 為其後繼數
& (F(x,y)  -> N(y))         若 y 為 x 之後繼數，y 必為非負整數。


皮亞諾公自然數的五條公理
i.  0是一個自然數。
ii. 0不是任何其他自然數的繼數。
iii.每一個自然數a都有一個繼數。
iv. 如果a與b的繼數相等則a與b亦相等。
v.  若一個由自然數組成的集合s包含有0，又若當s包含有某一數a時，
    它一定也含有a的繼數，則s就包含有全體自然數。

25.4.Gα(x)

設 α 是一數列，Gα(x) 指 α 的第 x 位數字為 1。
-Gα(x) 指 α 的第 x 位數字為 0。

25.5.A 定義 α

可以利用 Gα、N 與 P 之合取來建構一個公理 A，此公理定義了 α。

若公理 A 定義 α，
指 -A 不是可被證明的公式，
且對每個 n 而言，An 或 Bn 其中之一可被證明。

25.6.An

A & F^(n) ->  Gα(u^n)           (An)

25.7.Bn

A & F^(n) -> -Gα(u^n)           (Bn)

25.8.^(r)

r 個角分符號 ' 序列。

原文註解為 A sequence of r primes is denoted by (r)，
之前誤解為質數序列。

角分符號被稱作 prime 源於誤讀。

因為在20世紀初期，
x' 被讀作 x prime 並不是因為在 x 後跟著一個 prime symbol，
而是因為變數列 x', x'', x''' 讀作
x prime, x second,  x third，
prime 是「最初的」意思，而非角分符號之讀音。

後來在1950s與1960s年代，術語 prime 開始用於撇號這一類的符號。
使得現在 x'' 與 x''' 
在英文中通常讀作 x double prime 與 x triple prime。

25.9.F^(n)

F^(n) = F(u, u') & F(u', u'') & F(u'', u''') &...

u 可視為起始數，通常代表 0。

25.10.K 機

將 Hilbert 之函數計算(functional calculus)，限定成使用有限符號，
則可使用自動機 K 找到所有於函數計算中可證明之公式。

25.11.Kα 機

令 α 為可計算數列，Kα 機能計算出 α。

Kα 機分成 n 個階段，
在第 n 個階段中，會找出 α 的第 n 個數字。

第 n-1 個階段結束時，會印出雙引號 :: 於結尾。
第 n 個階段中執行所印出之符號都會在雙引號之右邊，
機器會執行以下之動作

i.   印出 A 後再印出公式 An 。

ii.  印出 B 後再印出公式 Bn。 

iii. 如同 K 機，開始尋找可證明之公式。

iv.  找到可證明公式後，與 An 及 Bn 比較，
     若與 An 一樣則印出 1，
     若與 Bn 一樣則印出 0。
     若不同於 An 及 Bn 則回到 iii，再找下一個可證明的公式。


由上述建構可知 Kα 終究會停止，
故其為 circle-free 機器且 α 為可計算之數列。

25.12.

可以證明若數字 α 能以上述之公理定義，則 α 可計算，
只要能將計算機之定義利用函數計算即可描述。

25.13.

不是所有可定義之函數均為可計算數，
由節 8 定義 δ 對角數，則不可計算。

26.定義整數可計算函數

整數可計算函數是指一個可計算函數其參數為整數。

26.1.γ

令 γ 為可計算數列。

26.2.n

n 為整數。

26.3.ξ(γ,n)

令 ξ(γ,n) 為 γ 中第 n 個 0 至第 n+1 個 0 中數字 1 的個數。

26.4.φ(n)

φ(n) = ξ(γ,n) 

26.5.H(x,y)

H(x,y) <-> φ(x) = y

26.7.Aφ

可以找出一無予盾之公理 Aφ 
滿足 Aφ -> P。

對每個整數 n ，存在一數 N 使得

Aφ & F^(N)  ->  H( u^n, u^φ(n) )

對每個 m <> φ(n) 存在一數 N' 使得  

Aφ & F^(N') -> -H( u^n, u^m    )

由此公理之建構，可知 φ(n) 為可計算之整數函數。

27.定義可計算變數可計算函數

27.1.γn

設 n 為滿足數，
則 γn 為 M(n) 所計算之數列。

27.2.an

an = tan(π(γn - 1/2)) | γn <> 0 or 1
     0                | γn == 0 or 1    

27.3.φ(n)

任何引數 n 若是滿足數，則其值也為滿足數。

雖然不存在通用程序去判斷給定數字 n 是否為滿足數，
但是存在某些方法去判斷某類數均為滿足數。

27.4.f

f(an) = aφ(n)


28.可計算數之定理

28.1.

一個整數或可計算數之可計算函數之可計算函數是可計算的。

28.2.

前鎮 2013/03/09 週六 

任何整數函數若以可計算函數作遞迴定義是可計算的。
若φ(m, n) 是可計算的，則 η 是可計算的。

η(0) = r,
η(n) = φ(n, η(n-1)).

令 H(x, y   ) <->  η(x)    = y
   K(x, y, z) <->  φ(x, y) = z

因為 φ 是可計算的，存在一公理 Aφ 來定義 φ。

可用 Aφ 來定義 Uη 如下：

Aφ & P & (F(x,y)                     ->  G(x,y    )) 
       & (G(x,y) & G(y,z)            ->  G(x,z    )) 
       & (F^(r)                      ->  H(u,u^(r))) -- η(0) = r, u 為 0 
       & (F(v,w) & H(v,x) & K(w,x,z) ->  H(w,z    )) -- η(n) = φ(n, η(n-1))
       & (H(w,z) & G(z,t) | G(t,z)   -> -H(w,t    ))

28.3

存在數 n 及 N 使得

Aη & F^(N) -> H(u^(n-1), u^(η(n-1)))

28.4.

存在 M 使得

Uφ & F^(M) -> K(u^(n)  , u^(η(n-1)), u^(η(n)))

Uη & F^(M) -> F(u^(n-1), u^(n)) 
            & H(u^(n-1), u^(η(n-1)))
            & K(u^(n)  , u^(η(n-1), u(η(n))))


η(0) = r
η(n) = φ(n, η(n-1))
     
30.Entschedidungsproblem

證明大綱

i.  存在公式 Un(M) 為真，
    此謂詞表示在 M 的一些完整描述中存在 0 於紙帶上。

ii. 若決定性問題可解，則存在一個機器程序決定 Un(M) 是否可證明。

iii.由引理 1 及 2，
    Un(M) 是否可證明若且為若 0 是否出現在 M 之一些完整狀態中。

iv. M 的一些完整狀態中若出現 0，則存在一個機器程序決定 M 是否會印出 0。

v.  由節 8 之證明 2，得知不存在一個機器程序決定 M 是否會印出 0。

vi. Un(M) 為真，但不可被證明，這意指決定性問題不可解。

30.1.Un(M)

此謂詞表示在 M 的一些完整描述中，存在 0 於紙帶上。

Un(M) =  (Ex u)A(M) 
      -> (Ex s)(Ex t)Rs1(s,t) # 存在完整狀態 s 中第 t 格為 0

30.2.A(M)

  Q 
& (y)RS0(u,y) & I(u,u) & Kq1(u) # 初始值
& Des(M)

30.3.G(x,y) 
    
x 在 y 之前，與 F(x,y) 不同是，
y 不是直接後繼數，中間也可以有很多數。

其定義 Q。
 
30.4.Q

Q 主要是定義了 G 這個函數。

(x)(Ex w)(y,z){ F(x,w) 
              &(F(x,y)          -> G(x,y)) # 定義 G(x,y)
              &(F(x,z) & G(z,y) -> G(x,y)) # x 在 y 前繼數或 x < y
              &[  G(z,x)           # z 於 x 之前
               v (G(x,y) & G(y,z)) # x 於 y 之前且 y 於 z 之前
               v (F(x,y) & F(z,y)) # y 為 x 及 z 之繼數，
               ->(-F(x,z))         # 上述條件任一滿足則 z 不是 x 繼數
               ]
              }

30.5.Des(M)

命名源自 Description-of-M，
機器 M 之描述，為 Inst 之合取運算。

原文記為邏輯和(logical sum)，圖靈於 1938 訂正為合取運算。

30.6.Inst{qi Sj Sk L ql} 

此謂詞描述指令為機器狀態為 qi 、掃描符號為 Sj，
下一步動作為印出 Sk，左移一格後，機器狀態轉為 ql。

(x, y, x', y'){ (Rsj(x , y ) & I(x, y) # 掃描符號為 Sj 
                &Kqi(x     )           # 機器狀態為 qi 
                &  F(x , x')
                &  F(y', y )           # y' = y-1
              ->(  I(x', y')           # 指左移一格
                &Rsk(x', y )           # 於 y 印出 Sk
                &Kql(x'    )           # 機器狀態轉為 ql 
                &(z)(F(y', z )                  # 完整狀態 x' 除了
                    v[( Rs0(x ,z) -> Rs0(x',z)) # 印出 Sk 那格 y，
                     &( Rs1(x ,z) -> Rs1(x',z)) # 其它格與完整狀態 x 
                     &...                       # 相同
                     &( RsM(x ,z) -> RsM(x',z))
                     ]
                    )

30.7.RSi(x,y) 

此謂詞表示在 M 的完整狀態 x 中，紙帶上格 y 的符號是 Si。

義仁 2013/02/15 星期五 

30.8.I(x,y)

此謂詞表示在 M 的完整狀態 x 中，正掃描到格 y。

30.9.Kqm(x)

此謂詞表示在 M 的完整狀態 x 中，機器狀態為 qm。

31.Lemma 1
若 S1 出現在 M 的一些完整狀態中，則 Un(M) 是可證明的。

先看要如何證明 Un(M)。

31.1.CCn

CCn 命名源自 n-th Complete Configuration，
指第 n 個完整狀態。

     Rsr(n    ,0      )(u^(n), u    ) # 紙帶上之符號
&    Rsr(n    ,1      )(u^(n), u'   )
&    ...
&    Rsr(n    ,n      )(u^(n), u^(n))
&      I(u^(n),u(i(n)))               # 掃描格
& Kqk(n)(u^(n))                       # 機器狀態 為 qk
& (y)(   F(y      ,u')               # 紙帶不在 1 至 n 區間
     v   F(u      ,y )               # 均為空格
     v   F(u'     ,y )
     v   ...
     v   F(u^(n-1),y )
     v Rs0(u^(n)  ,y )

31.2.sr(n,y) 

第 n 個完整狀態中第 y 格之符號。

31.3.i(n)

第 n 個完整狀態中掃描之格。

31.4.CC0

  (y)Rs0(u,y) # 初始完整狀態紙帶全為空格
&  I(u,u)     # 初始完整狀態掃描格是第一格 
&  Kq1(u)     # 初始完整狀態機器狀態為 q1

31.5.CFn

A(M) & F^(n) -> CCn

31.6.

A(M) -> CC0 是可直接得到的。

31.6.

CFn -> CF(n+1)

31.7.

r(n  , i(n)) = b # 完整狀態 n，其掃描符號為 b
r(n+1, i(n)) = d # 完整狀態 n，其印出符號為 d
r 之名源自 reihe
k(n)         = a # 完整狀態 n  ，其機器狀態為 a
k(n+1)       = c # 完整狀態 n+1，其機器狀態為 c

31.8.

Des(M) 必須包含下面指令，才有上述之完整狀態之轉換。

Des(M) -> Inst{qa Sb Sd L qc}

由上可推出

A(M) & F^(n+1) -> Inst{qa Sb Sd L qc} & F^(n+1)

因為
Inst(qa,Sb,Sd,L,qc) & Q & F^(n+1) -> (CCn -> CCn+1)
是可證的。

所以

A(M) & F^(n+1) -> (CCn -> CCn+1)

且 

(A(M) & F^(n) -> CCn) -> (A(M) & F^(n+1) -> CCn+1)

也就是

CFn -> CFn+1

對每個 n 而言，CFn 是可證的。

A(M) & F^(N) -> CCN

引理 1 假設 S1 出現在 M 的一些完整狀態中，
那表示存在整數 N, K, CCN
包含 Rs1(u^(N), u^(K)) 之項目，
可得 
CCN -> Rs1(u^(N), u^(K))   
是可證明的。

又可得
CCN -> Rs1(u^(N), u^(K)) 且 A(M) & F^(N) -> CCN。

(Ex u)A(M) -> (Ex u)(Ex u')...(Ex u^(N')(a(M) & F^(N)),
其中 N' = max(N, K)。

(Ex u)A(M) -> (Ex u)(Ex u')...(Ex u^(N')Rs1(u^(N), u^(K)) 

(Ex u)A(M) -> (Ex u^(N)(Ex u^(K))Rs1(u^(N), u^(K)) 

(Ex u)A(M) -> (Ex s)(Ex t)Rs1(s, t) 

得出 Un(M) 是可證明的。

31.Lemma 2

若 Un(M) 是可證明的，則 S1 出現在 M 的一些完整狀態中。

若將可證明公式中的函數變數以命題函數取代，可得一個真的命題。
特別是若我們取代 Un(M) 的函數變數，
可得一個真命題，其意義為 S1出現在 M 的一些完整狀態中。

花蓮 2013/03/14 星期四 

40.有效計算是可計算的

花蓮 2013/03/19 週二 

40.1.

若數列 γ 第 n 個數 φγ(n) 稱作可有效計算或的 λ-可定義，
則存在 1 + φγ(n) 為 n 的 λ-可定義函數，
例如：

存在合式公式(W.F.F) Mγ 對所有的整數　n 

{Mγ}(Nn) -> Nφγ(n)+1 

這指 {Mγ}(Nn) 依據數列 γ 第 n 個數決定轉換成何數，
若數列 γ 第 n 個數是 1 則轉換成 N1，是 0 則轉成 N2。

原文是寫成數列 λ 第 n 個數，也許我是第一個發現此錯誤的人。

40.2.邱奇數

每個數字可用下列公式表示：

1 -> λab . a(b)
2 -> λab . a(a(b))
3 -> λab . a(a(a(b)))

上述公式分別記成 N1, N2, N3。

40.3.證明 λ-可定義數列 γ 是可計算的，

要證明 λ-可定義數列 γ 是可計算的，
同作者一向的作法，要建構一個機器去印出 γ 於紙帶上。

40.4.L1 機

L1 機是一台選擇機，
給定一個合式公式 M，會產出任何 M 能轉換的公式。

40.5.L2 機

L2 機是一台自動機，
會接續列舉所有 M 能轉換的公式。

40.6.L 機

L 機分成階段來執行計算。

第 n 個階段會先建構公式 

{Mγ}{(Nn)

此公式再轉給 L2 機，
接續列舉所有 {Mγ}{(Nn) 能轉換的公式。

再將列舉的公式與
N2 (即λx[λx'[{x}({x}(x'))]]) 比較，
若相同則 L 印出 1，並結束第 n 個階段。

再與 N1 比較，若相同則印出 0，並結束第 n 個階段。

若都不同則交由 L2 再列舉下一個可轉換之公式。

由假設 {Mγ}(Nn) 最終會轉換成 N1，或是 N2。
這表示第 n 個階段終會結束，
故 L 機會印出 γ 於紙帶上。


40.3.證明可計算的數列 γ 是λ-可定義的

同上存在合式公式(W.F.F) Mγ 對所有的整數　n 

{Mγ}(Nn) -> Nφγ(n)+1 

這指 {Mγ}(Nn) 依據數列 γ 第 n 個數決定轉換成何數，
若數列 γ 第 n 個數是 1 則轉換成 N1，是 0 則轉成 N2。


令 M 機計算出 γ。

40.4.ξ(n) 

令 ξ(n) 表示 M 的第 n 個完整狀態之描述數。 

40.5.ργ

ργ 會將輸入的完整狀態，轉為下一個完整狀態。

ξ(n+1) = ργ(ξ(n))

圖靈省略對 ργ 是 λ-可定義之證明。

40.6.Aγ

因為 ργ 是 λ-可定義，
故存在合式公式 Aγ 對所有整數 n 可得

{Aγ}(Nξ(n)) -> Nξ(n+1)

40.7.Uγ

令 Uγ 表示下列合式公式：

λu[{{u}(Aγ)}(Nr)]

其中 r = ξ(0)

則對所有整數 n

{Uγ}(Nn) -> Nξ(n)

我的證明：

   {Uγ}(N3) 
-> {{N3}(Aγ)}(Nr) 
-> {{λx[λx'[{x}({x}({x}(x')))]}(Aγ)}(Nr) 
-> {[λx'[{Aγ}({Aγ}({Aγ}(x')))]}(Nr) 
-> {Aγ}({Aγ}({Aγ}(Nr)))
-> {Aγ}({Aγ}(Nξ(1)))
-> {Aγ}(Nξ(2))
-> Nξ(3)

40.8.V

可建構公式 V 判定第 n 個完整狀態轉換至第 n+1 個完整狀態，
是否會印出 1 或 0。

{{V}(Nξ(n+1))}Nξ(n) -> N1 | 第 n 個完整狀態轉換至第 n+1 個完整狀態，
                            會印出 0。 
                    -> N2 | 會印出 1。
                    -> N3 | 其它情形。

命名源自判定書的英文(verdict)。

40.9.Wγ

Wγ 接受一個整數公式 Nn，判定第 n 個完整狀態轉換至第 n+1 個完整狀態，
是否會印出 1 或 0。

Wγ := λu[{{v}({Aγ}({Uγ}u))}({Uγ}u)

40.10.

由上可得對每個整數 n 都可得，

{{V}(Nξ(n+1))}Nξ(n) -> {Wγ}Nn 

40.11.Q

可建構公式 Q 接受 Ns，
並傳回數列 γ 第 s 個數之公式。

{{Q}(Wγ)}(Ns) -> Nr(s)

其中 r(s) 是數列 γ 第 s 個數 q，
這樣 {Wγ}Nq 便可判定轉成 N1 或 N2。

40.12.Mγ

這指 {Mγ}(Nn) 依據數列 γ 第 n 個數決定轉換成何數，
若數列 γ 第 n 個數是 1 則轉換成 N1，是 0 則轉成 N2。

可建構 Mγ 如下：

Mγ := λw[{Wγ}({{Q}(Wγ)}(w))]
