The difference is that all refs are copied as-is. This means
 everything: remote-tracking branches, notes, refs/originals/*
 (backups from filter-branch). The cloned repo has it all. It's also
 set up so that a remote update will re-fetch everything from the
 origin (overwriting the copied refs). The idea is really to mirror
 the repository, to have a total copy, so that you could for example
 host your central repo in multiple places, or back it up. Think of
 just straight-up copying the repo, except in a much more elegant git
 way.

The new documentation pretty much says all this:

--mirror

Set up a mirror of the source repository. This implies --bare.
 Compared to --bare, --mirror not only maps local branches of the
 source to local branches of the target, it maps all refs (including
 remote branches, notes etc.) and sets up a refspec configuration such
 that all these refs are overwritten by a git remote update in the
 target repository.

My original answer also noted the differences between a bare clone and
 a normal (non-bare) clone - the non-bare clone sets up remote
 tracking branches, only creating a local branch for HEAD, while the
 bare clone copies the branches directly.

Suppose origin has a few branches (master (HEAD), next, pu, and
 maint), some tags (v1, v2, v3), some remote branches (devA/master,
 devB/master), and some other refs (refs/foo/bar, refs/foo/baz, which
 might be notes, stashes, other devs' namespaces, who knows).

git clone origin-url (non-bare): you will get all of the tags copied,
 a local branch master (HEAD) tracking a remote branch origin/master,
 and remote branches origin/next, origin/pu, and origin/maint. The
 tracking branches are set up so that if you do something like git
 fetch origin, they'll be fetched as you expect. Any remote branches
 (in the cloned remote) and other refs are completely ignored.

git clone --bare origin-url: 
you will get all of the tags copied,
local branches master (HEAD), next, pu, and maint, 
no remote tracking branches. 

That is, all branches are copied as is, and it's set up
completely independent, with no expectation of fetching again. 
Any remote branches (in the cloned remote) and other refs are completely
ignored.

git clone --mirror origin-url: every last one of those refs will be
 copied as-is. You'll get all the tags, local branches master (HEAD),
 next, pu, and maint, remote branches devA/master and devB/master,
 other refs refs/foo/bar and refs/foo/baz. Everything is exactly as it
 was in the cloned remote. Remote tracking is set up so that if you
 run git remote update all refs will be overwritten from origin, as if
 you'd just deleted the mirror and recloned it. As the docs originally
 said, it's a mirror. It's supposed to be a functionally identical
 copy, interchangeable with the original.
